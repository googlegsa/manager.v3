## JdbcStore SQL localization resources.  This is used to tailor the
## SQL queries and DDL used by JdbcStore to specific vendor implementations.

## SQL Table and Column names

# The name of the Connector Instance table that is created.
table.name = google_connectors

# Integer auto-incrementing primary key id for each row.
column.id = id

# Integer modification stamp, updated when the value is changed.
column.modify_stamp = modify_stamp

# The connector name.  A string with maximum length of 64 characters.
column.connector_name = connector_name

# The property name of the configuration property.
# A string with maximum length of 64 characters.
column.property_name = property_name

# The configuration property value.  This can theoretically be
# an arbitrarily long String, although for Google-supplied
# connectors, it ranges from tens of bytes to a few kilobytes.
# The stored value may be NULL.
column.property_value = property_value

## DDL Data Definitions

# The DDL statement is used to create the Connector instance configuration
# table if it does not already exist.  Table creation and datatype syntax
# varies by database vendor.  The DDL may consist of several statements,
# so the DDL is specified as an EProperties list, where each list item
# is a separate SQL statement.
table.create.ddl = ( "CREATE TABLE IF NOT EXISTS ${table.name} ( ${column.id} INT IDENTITY PRIMARY KEY NOT NULL, ${column.modify_stamp} INT, ${column.connector_name} VARCHAR(64) NOT NULL, ${column.property_name} VARCHAR(64) NOT NULL, ${column.property_value} VARCHAR NULL )" )

## Queries

# Queries used to construct the inventory.
# The queries are in  java.text.MessageFormat syntax.
# TODO: configuration_type should it be constant, substitution, java.text.Message, or prepared query syntax?
getinventory.types.query = "SELECT ${column.connector_name}, ${column.property_value} FROM ${table.name} WHERE ( ${column.property_name}={0} AND ${column.property_value} IS NOT NULL )"
getinventory.stamps.query = "SELECT ${column.modify_stamp}, ${column.connector_name}, ${column.property_name} FROM ${table.name} WHERE ( ${column.property_value} IS NOT NULL )"

# Used to read one of the property values.
# TODO: use java.text.Message or prepared query syntax?
getvalue.query = "SELECT ${column.property_value} FROM ${table.name} WHERE ( ${column.connector_name}={0} AND ${column.property_name}={1} )"

# Used to write one of the property values.
# TODO: use java.text.Message or prepared query syntax?
setvalue.query = "SELECT ${table.name}.* FROM ${table.name} WHERE ( ${column.connector_name}={0} AND ${column.property_name}={1} )"

