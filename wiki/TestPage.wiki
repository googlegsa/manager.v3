<html>
<body>
<div style="PADDING:8px; BACKGROUND-COLOR:white">  <h1>  <font size="5"> Connector
Framework Technical Introduction</font>  </h1>  <span style="FONT-WEIGHT:bold">Draft
1.0a2</span><br style="FONT-WEIGHT:bold"/>  <span style="FONT-WEIGHT:bold">Revised 18 Dec
2006 (jwp)</span><br/>  <br/>  The <span style="FONT-WEIGHT:bold">Google Connector
Framework (GCF)</span>  enables Google search appliances to work with content stored in
various popular Enterprise Content Management systems. An <span
style="FONT-WEIGHT:bold">Enterprise Content Management (ECM)</span>  system provides a
central repository for large numbers of documents; it is not uncommon for such systems to
manage ten million documents. While all ECM systems provide some ability to retrieve
documents based on associated keywords or other metadata, this functionality is extremely
limited and slow in comparison to the powerful, flexible search capabilities that Google
search appliances provide.<br/>  <br/>  Many ECM systems provide an API that enables the
programmatic manipulation of documents. You can use the Connector Framework to create your
own Java connector that calls the native API of a specific ECM system on behalf of Google
search appliances. Multiple connector instances enable a search appliance to interact with
multiple ECM systems.<br/>  <br/>  Most ECM systems authenticate users, control access to
documents, and provide version-management functionality. Each connector enables a Google
search appliance to provide customized, optimized, automatic interaction with the
authentication and authorization features of a specific ECM system in order to:<span
style="FONT-WEIGHT:bold"></span><br/>  <div style="MARGIN-LEFT:40px">  <span
style="FONT-WEIGHT:bold"></span>  </div>  <div style="MARGIN-LEFT:40px">  <ul>  <li> 
Build and update the index of searchable documents </li>  </ul>  </div>  <div
style="MARGIN-LEFT:40px">  <ul>  <li>  Customize search results according to the access
privileges of the user that issued the search query </li>  </ul>  <ul>  <li>  Serve
documents from the ECM repository when the user clicks links in the search results<br/> 
</li>  <li>  Provide a single-sign-on experience that allows users to log into the search
appliance and the ECM system only once per day, rather than every time the user issues a
query or clicks a link in search results </li>  </ul>  <br/>  </div>  Many ECM systems
provide a means of signalling users when documents are added, deleted, or changed. Your
Java connector can use events generated by the ECM system to keep its index of crawled
documents up-to-date. However, the Connector Framework does not require the ECM system to
generate events. If the file paths that the Google search appliance uses to crawl the
document repository are not suitable for direct access to the document by users, your
connector can represent them differently in search results.<br/>  <br/>  The Google
Connector Framework (GCF) introduces one new significant public component, the <span
style="FONT-WEIGHT:bold">Connector Manager</span>. This service is responsible for hosting
and running connectors built with this framework. It also manages all communications
between Google search appliances and connectors. To manage your connectors, you'll run an
instance of the Connector Manager on any application server that provides a servlet
interface, such as Apache Tomcat. &nbsp; <div style="MARGIN-LEFT:40px">  <br/>  </div> 
The Google Connector Framework (GCF) also provides:<br/>  <div style="MARGIN-LEFT:40px"> 
<div style="MARGIN-LEFT:40px">  <br/>  </div>  <ul>  <li style="FONT-WEIGHT:bold">  A
simple and consistent graphical user interface (GUI) for administration of connectors.
</li>  </ul>  <div style="MARGIN-LEFT:40px">  The Administration console of the Google
search appliance provides a graphical user interface for configuring and managing
connectors. Using the Connector Framework, you can customize and extend this interface to
accommodate specific features of your own connectors.<br/>  </div>  <ul
style="FONT-WEIGHT:bold">  <li>  Programmatic configuration of connectors by means of
Spring-compliant XML files. </li>  </ul>  <div style="MARGIN-LEFT:40px">  For ease of
installation, you can use a <a
href="http://docs.google.com/View?docid=dfpz45vp_2dspqpt#Spring" title="Spring">Spring</a>
 file to<br/>  <ul>  <li>  Automate the configuration of all connector settings </li> 
<li>  Configure optional features that do not lend themselves well to representation in a
graphical interface </li>  <li>  Specify configuration details not visible to the
connector, such as the hostname of the machine on which its Connector Manager instance
runs<br/>  </li>  </ul>  </div>  <div style="MARGIN-LEFT:40px">  </div>  <ul
style="FONT-WEIGHT:bold">  <li>  Common scheduling and reporting that is customizable for
each connector instance. </li>  </ul>  <div style="MARGIN-LEFT:40px">  The GSA console
provides centralized scheduling and reporting for all installed connectors, and you can
configure individual connectors to augment or supersede these settings. You can customize
your connector's crawling, feeding, authentication, and authorization behavior for optimum
interaction with a specific ECM system. Additionally, you can configure each individual
connector instance for optimum support of installation-specific parameters, such as the
maximum number of requests it may send to a particular document repository in a specified
time period.<br/>  </div>  <ul>  <li>  <span style="FONT-WEIGHT:bold">Open source
code<br/>  </span>  </li>  </ul>  <div style="MARGIN-LEFT:40px">  Google uses the Apache 2
license to make the Connector Framework source code open. Google's goals in making the
project open-source are:<br/>  <ul>  <li>  To encourage and facilitate the development of
connectors and other custom code for the GSA </li>  </ul>  <ul>  <li>  To provide the
ultimately authoritative documentation of system behavior: source code. </li>  <li>  To
allow developers to debug with the aid of full view of the source </li>  <li>  To open the
architecture and development of the framework as a cooperative project </li>  <li>  To
give developers freedom to fix bugs in the framework<br/>  </li>  <li>  To enable
developers to add significant new features easily<br/>  </li>  <li>  To encourage the free
exchange of features, fixes, and other ideas within the developer community </li>  </ul> 
<br/>  </div>  <div style="MARGIN-LEFT:40px">  </div>  </div>  <span
style="COLOR:#3333ff"></span>Although Google is providing the first release of this
framework, it's important to note that Google does not officially provide technical
support for the Connector Framework; as with any other open-source project, technical
support, bug fixes, and new features for this framework come from your fellow members of
the open-source community.<br/>  <br/>  Please note also that this version of the
Connector Framework does not yet provide full functionality. Rather, it provides an early
peek at this project for those who wish to get an early start on the design and
development of their own connectors. Google urges you to return to this site regularly for
updates to the connector framework source code and its documentation.<br/>  <div
style="MARGIN-LEFT:40px">  <br/>  <br/>  </div>  <h2>  Architectural Overview<br/>  </h2>
 <span style="COLOR:#cc0000">&lt;!-- This section is very rough. For today, I just want to
get the ideas down - I'll polish them up later. For this section only, pls concentrate on
technical accuracy, not grammar or organization. Thanks! (jwp) --&gt;<br/>  <br/> 
</span>A specific connector instance communicates with a specific ECM system in response
to requests it receives from its Connector Manager. This Connector Manager runs on an
application server and communicates with the servlet interface of another Connector
Manager instance onboard the Google search appliance. Each connector instance manages
exactly one ECM system, but the ECM system can manage multiple repositories. The use of an
off-board authentication (AuthN) server is required for Single-Sign On functionality;
otherwise, it is optional.<br/>  <br/>  <span style="FONT-WEIGHT:bold">Figure 1: Connector
Architecture</span><br/>  <span style="FONT-WEIGHT:bold"> </span><br/>  <span
style="FONT-WEIGHT:bold"> </span><span style="COLOR:#cc0000">&lt;!-- I still haven't
figured out how to arrange thngs so the lines running from the servlet intf to the
connectors don't cross the lines running from the</span><span style="COLOR:#cc0000">
connectors to the ECMs.<br/>  Do we need to show the user's browser?--&gt;</span><br/> 
<div style="MARGIN-LEFT:40px">  <span style="FONT-WEIGHT:bold">  </span><img
src="File?id=dgnhd83_19hjv5rm" style="HEIGHT:720px; WIDTH:960px" title="Connector
Manager"/>  </div>  A single .jar file contains the executable code and resources required
to create a connector instance. To install this file, you place it in a designated
directory on an application server that runs a Connector Manager instance. The
administrator of the Google search appliance specifies the location of this special
directory when configuring the Connector Manager instance that runs on the application
server.<br/>  <br/>  When you run your Connector Manager instance, you must first register
it with the Google search appliance, which causes it to appear in the Admin Console of the
Google search appliance. Each Connector Manager instance discovers all connector JARs in
its special directory automatically, and displays a list of them in the Admin
Console.<br/>  <br/>  To create an instance of a connector, you choose it from the
drop-down list that a Connector Manager instance displays in the Admin Console, then click
the <span style="FONT-WEIGHT:bold">Create New</span> button. The Admin Console displays
the new connector instance along with the additional user interface items required to
configure it; for example, each connector instance configuration page must provide a means
of specifiying the path to the ECM system that particular connector instance manages.
Connector-specific user interface items are HTML form snippets that the connector .jar
file provides.&nbsp;<br/>  <br/>  <span style="FONT-WEIGHT:bold">Crawling and
Feeding</span><br/>  <br/>  To generate the initial index of repository content,&nbsp; the
search appliance sends requests to the connector via the Connector Manager, as scheduled
in the Admin Console. In response to these requests, the connector log into the ECM
repository as a super-user that can read all documents, and calls the existing Google
Crawl API. Updates to the index are handled similarly, using the existing Feed API.<br/> 
<br/>  <span style="FONT-WEIGHT:bold">Authentication and SSO </span><br/>  <br/>  When a
user searches the ECM repository, the search results must display only documents the ECM
system allows that user to see. To do so, the Connector Manager must authenticate and
authorize (AAA) the user on behalf of the ECM system before serving the results of the
query. The AAA mechanism is installation-specific; for example, a simple installation
might utilize the built-in HTTP Basic authentication functionality that the Google search
appliance provides, but most corporate intranets will utilize some sort of off-board
identity provider, such as an LDAP or SAML server, for this purpose. Google strongly
recommends the use of a third-party identity provider, as your connector's implementation
of a single-sign on (SSO) user experience is dependent on the use of one.<br/>  <br/>  In
the absence of the SSO experience, the user is challenged for credentials under the
following circumstances:<br/>  <ul>  <li>  initial login to the ECM in the course of
conducting a search </li>  <li>  every time the user clicks a search-results link to a
document in the ECM repository </li>  <li>  initial login to the ECM separately from
Google searches </li>  </ul>  <br/>  A connector that implements SSO functionality
eliminates the second bullet point entirely, with the result that the ECM system
challenges the user for AAA credentials only once per day, as opposed to every time the
user searches or clicks a link in search results. Unfortunately, there is nothing your
connector can do to extend the SSO experience to the ECM system itself if that system does
not support the use of SSO on its own. With the SSO experience in place, the user gets
challenged only twice per day: once when the connector conducts its the first search of
the day on behalf of that user, and once when the user logs into the ECM system directly
(to add a new document to the repository, for example.)<br/>  <br/>  To implement the SSO
experience, your connector authenticates to the external identity provider on behalf of
the user when the user conducts the first search of the day. The identity provider returns
a Web cookie that the components of the system use subsequently for AAA purposes. The
details of this mechanism are complex and require more substantive discussion than this
document can provide; in brief, the sequence of events that occurs when a user attempts to
search ECM repository content using the Google search appliance is as follows:<br/>  <ol>
 <li>  On search, user's browser contacts the Google search appliance to open a session
</li>  <li>  The search appliance displays a username/password login page </li>  <li>  The
search appliance passes the user's login info to the connector manager's servlet
interface<br/>  </li>  <li>  The servlet interface passes user login info to the Security
API of the Connector Manager instance<br/>  </li>  <li>  The Connector Manager instance
passes the user's login info to the identity provider<br/>  </li>  <li>  The identity
provider returns to the Autnentication API a cookie that AAAs the Connector Manager as
that user for subsequent interactions with the ECM system </li>  <li>  The Connector
Manager passes the cookie back to the search appliance via the servlet interface </li> 
<li>  The search appliance implants the cookie in the user's browser. </li>  <li>  User
clicks on a link in the search results. </li>  <li>  The ECM system treats the user as
already having logged in, and serves the document without a second challenge for user
credentials. </li>  </ol>  <br/>  As mentioned previously, this summary omits many details
in the interest of brevity; in particular, watch this site for a more substantive
discussion of how to manage the cookie and the search results in order to make this
scenario work.<br/>  <br/>  <span style="FONT-WEIGHT:bold">Authorization</span><br/> 
<span style="FONT-WEIGHT:bold"></span>Recall that the search appliance logs into the ECM
system as a super-user when building or updating its index of documents in the ECM
repository. Because most users do not have unlimited access to all documents in the
repository, a connector usually must also filter search results according to the access
privileges associated with the user that issued the search query.&nbsp;<br/>  <br/>  When
an authenticated user issues a search query, the following sequence of events occurs:<br/>
<ol> <li> The search appliance returns to the Connector Manager a list of all documents
matching the query. </li> <li> The Connector Manager distributes the list items to each
connector according to the ECM system or repository the connector manages; each connector
gets a list of only the documents that reside in the ECM system or repository it
manages.<br/> </li> <li> The connector calls the native API of the ECM system to test the
user's access privileges for each document; for best performance, this test validates
documents in batches rather than with individual calls.<br/> </li> <li> The connector
returns to the Connector Manager only the documents that the ECM system allows the user to
access. </li> <li> The connector manager aggregates the results from all connectors and
returns those results to the search appliance. </li> <li> The search appliance serves the
list of results to the user.<br/> </li> </ol> <br/> Please visit this site again for
documentation updates that describe these concepts and behaviors in greater detail.<br/>
<div style="MARGIN-LEFT:40px"> <br/> <span style="COLOR:#3333ff"></span> </div> <h2>
System Requirements </h2> <span style="COLOR:#3333ff"> </span>This section describes the
systems you'll need for connector development:<br/> <br/> <ul> <li> <span
style="FONT-WEIGHT:bold">ECM System</span>: the Enterprise Content Management system that
holds the documents to search<br/> </li> <li> <span style="FONT-WEIGHT:bold">Connector
Host</span>: the computer on which the Connector Manager and its connectors run </li> <li>
<span style="FONT-WEIGHT:bold">Development System</span>: the computer you use to write
and compile Java code </li> </ul> <br style="COLOR:#3333ff"/> <span
style="COLOR:#cc0000"></span><span style="FONT-WEIGHT:bold"></span><br
style="COLOR:#cc0000; FONT-WEIGHT:bold"/> <br/> <font size="3"><span
style="FONT-WEIGHT:bold">ECM System</span></font><br/> <font size="3"><span
style="FONT-WEIGHT:bold"> </span></font><br/> <font size="3"><span
style="FONT-WEIGHT:bold"> </span></font> Because the Connector Framework is intended for
connections with ECM systems, it assumes that the content source:<br/> <br/> <ul> <li>
Manages file-based data.<br/> </li> </ul> <div style="MARGIN-LEFT:40px"> Ideally, these
files are text-based, but search results can present other kinds of files if the ECM
metadata provides a text-based alternate representation of the document.<br/> </div> <ul>
<li> Provides the following metadata items for all documents that are to be indexed: </li>
<ul> <li> last modify date </li> <li> a system-dependent unique ID<br/> </li> </ul> <li>
Has a central document registry that can be queried efficiently for documents added or
changed after a specified date and time. </li> <li> Can return documents in modify-date
order. </li> </ul> <br/> An external system that does not meet these assumptions may not
interoperate easily with the current framework.<br/> <h2> <font><font><font><font
size="3">Connector Host System</font></font></font></font> </h2> <span
style="COLOR:#3333ff"></span><span style="COLOR:#000000">You can run the Connector Manager
and your connectors on any platform that provides:</span><br/> <span
style="COLOR:#000000"> </span> <ul> <li> Java language version 1.4.2<br/> </li> <li> Java
runtime environment version 1.4 or above <span style="COLOR:#3333ff"><span
style="COLOR:#000000"> </span></span> </li> <li> <span style="COLOR:#3333ff"><span
style="COLOR:#000000">An application server that has a servlet interface.</span></span>
</li> </ul> <span style="COLOR:#3333ff"><span style="COLOR:#000000">Google uses Apache
Tomcat for development of this framework; however, any similar application server should
be suitable. Should you run into incompatibilities, the open source code base allows you
to customize the framework or your implementation to support your preferred Connector Host
system.</span></span><br/> <span style="COLOR:#3333ff"><span style="COLOR:#000000">
</span></span><br/> <span style="COLOR:#3333ff"> </span> <h2> <font><font size="3">
Development System<br/> </font></font> </h2> <span style="COLOR:#3333ff"></span><span
style="COLOR:#3333ff"></span>You can develop in this framework using any Java environment
that supports Java Development Kit (JDK) version 1.4.2 and Java Runtime Environment
version 1.4 or later. For your convenience, this site provides sample projects and
configuration files for the Eclipse environment.<br/> <p style="COLOR:#3333ff"> </p> <p
style=""> </p> <h2> Connector Development Overview </h2> There are five main steps to
developing a connector:<br/> <ol> <li> <a
href="http://docs.google.com/View?docid=dfpz45vp_2dspqpt#Design" title="How your connector
interacts with the CM and the ECM">Design</a> <span style="FONT-WEIGHT:bold">:</span>
mapping your design goals and ECM system characteristics to features of the CM
Framework<br/> </li> <li> <a
href="http://docs.google.com/View?docid=dfpz45vp_2dspqpt#Coding" title="Implementing
required and optional functionality">Coding</a> <span style="FONT-WEIGHT:bold">:</span>
implementing required content-feed, authentication, authorization, crawl, and search
functionality; building your connector jar </li> <li> <a
href="http://docs.google.com/View?docid=dfpz45vp_2dspqpt#Installation%20and%20Configuration"
title="Installing onboard vs. off-box">Installation</a> : uploading your built connector's
.jar file to the Connector Host system<br/> </li> <li> <a
href="http://docs.google.com/View?docid=dfpz45vp_2dspqpt#Configuration" title="Common
settings and connector-specific settings">Configuration</a> : Configuring Connector
Manager and connector settings; running the Connector Manager and the connector<br/> </li>
<li> <a href="http://docs.google.com/View?docid=dfpz45vp_2dspqpt#Test%20and%20Debug"
title="lather, rinse, repeat">Test and Debug</a> <span style="FONT-WEIGHT:bold">:</span>
Creating your own unit tests, invoking unit tests the connector framework provides,
troubleshooting suggestions. </li> </ol> <br/> The built connector is a single .jar file
that provides executable code and resources. These resources include the Spring-compliant
XML file that specifies configuration information. <h2> <a name="Design"></a> </h2>
&nbsp;To install and run a new connector, you'll take the following steps:<br/> <ol> <li>
Place the connector's .jar file in a location specified when the Connector Manager was
installed. </li> <li> In the Admin Console of the Google search appliance, configure and
run the new connector.<br/> </li> </ol> <div style="MARGIN-LEFT:40px"> For security
reasons, a connector cannot run itself. A connector that is entirely self-configuring
still requires the intervention of the administrator of the Connector Manager to run.<br/>
</div> <h2> <a name="Configuration"></a> </h2> <p style=""> </p> <h3> <a
name="Spring"></a>Connector Configuration Using Spring </h3> Spring is a Java framework
that provides, among other things, a means of using XML files to manage the configuration
of connectors through an approach known as Dependency Injection; essentially, your
connector configures itself at runtime using objects the Spring framework provides
according to information its XML configuration file specifies. While this statement is
accurate, it is similar to saying that a rocket, a bird, and a biplane are things that
fly; it skips over many details in the interest of brevity. For more information on
Spring, see the <a
href="http://www.theserverside.com/tt/articles/article.tss?l=SpringFramework"
target="blank_" title="info about the Spring Framework, Dependency Injection, and
more">Introduction to the Spring Framework</a> article, by Rod Johnson. On the site that
hosts this article, <a href="http://theserverside.com" target="blank_" title="resources
for the Java Enterprise community">http://theserverside.com</a> , you'll find numerous
resources dedicated to the Enterprise Java Community.<br/> <br/> <p style=""> </p> <h3> <a
name="Test and Debug"></a> </h3> <p style=""> </p> <h2> Getting Started </h2> Although the
current release of the framework does not yet provide complete functionality, you can
still use the current framework to begin your development efforts. This section describes
steps you can take right now to get started on the design and development of a connector .
Please return to this site regularly for updates to the framework and documentation.<br/>
<br/> <h3> Downloading the Connector Framework Distribution<br/> </h3> This site provides
pre-release versions of the Connector Framework source code and Javadoc API reference. At
the present time, you'll need to use Subversion (a popular open-source version control
system) to download them; later on, you'll be able to browse the framework source code and
documentation online by clicking on the Source tab of this site.<br/> <br/> To get
Subversion, <a href="http://subversion.tigris.org/" style="COLOR:#3333ff" target="blank_"
title="Subversion project web site ">click here</a> to go to the home page of the
Subversion project web site, where you can find prebuilt and build-your-own versions of
this utility for many operating systems.<br/> &nbsp;<span
style="COLOR:#cc0000"></span><br/> Once you've installed Subversion, follow the
instructions on <a
href="http://code.google.com/p/google-enterprise-connector-manager/source" target="blank_"
title="Info on using Subversion to check out Connector Framework sources.">this page</a>
to download the Connector Framework sources.<br/> <br/> For more information, read <a
href="http://svnbook.red-bean.com/en/1.1/index.html" style="FONT-STYLE:italic"
target="blank_" title="Version Control With Subversion">Version Control With
Subversion</a>, a free book by Ben Collins-Sussman, Brian W. Fitzpatrick, and C. Michael
Pilato.<br/> <div> <div class="authorgroup"> <br/> </div> </div> <h3> Looking at the
Sources </h3> More complete documentation is on the way soon; for now, here are some
pointers into the source code:<br/> <span style="COLOR:#cc0000">&lt;!--&nbsp; this is off
the top of my head, undoubtedly wrong, as I haven't even seen any code at this point. But
you get the idea. Specific suggestions appreciated, esp wrt which interfaces they must
implement in order to do what, and so on. (jwp) --&gt;</span><br/> <br/> <ul> <li> One
package, <span style="FONT-FAMILY:Courier New">com.google.enterprise.connector.spi</span>,
provides the entire connector framework. </li> <li> You'll extend class <span
style="FONT-FAMILY:Courier New">ConnectorType </span>to create your own connector class
that provides functionality and data that is common to all of your connectors.<br/> </li>
<li> You'll extend the <span style="FONT-FAMILY:Courier New">Connector </span>subclass of
the <span style="FONT-FAMILY:Courier New">ConnectorType</span> class to add
connector-specific functionality, such as the details required to interoperate with a
specific ECM system. You instantiate the Connector subclass to create a connector
instance.<br/> </li> </ul> <div style="MARGIN-LEFT:40px"> For example, your
MyConnectorType subclass might provide a <span style="FONT-FAMILY:Courier
New">MY_REPOSITORY</span> variable that all of your connectors use.&nbsp; Your
MyFooConnector subclass of the Connector class might cast this variable to the MyFooType,
while your MyBarConnector subclass might cast it to the MyBarType. Additionally, each of
these subclasses might add other data and methods that instances of their particular kinds
of connectors need in order to interoperate with a particular ECM system; for example,
perhaps the Bar ECM system and the Foo ECM system use different metadata models.<br/>
</div> <ul> <li> The Connector Manager instance that runs your connector comprises three
objects: <span style="FONT-FAMILY:Courier New">AuthenticationManager</span>, <span
style="FONT-FAMILY:Courier New">AuthorizationManager</span>, and <span
style="FONT-FAMILY:Courier New">QueryTraversalManager</span>. You'll extend the first two
classes to call the native API your ECM system provides for authentication and
authorization services. Your subclass of the <span style="FONT-FAMILY:Courier
New">QueryTraversalManager </span>class implements your connector's crawl and feed
functionality by calling the existing Google crawl and feed APIs.<br/> </li> <li> The
<span style="FONT-FAMILY:Courier New">SimpleXXX </span>and <span
style="FONT-FAMILY:Courier New">ValueXXX </span>classes provide typed data objects used to
pass data among the various components of the system, as well as getters and setters for
manipulating the data those objects encapsulate. Again, you can extend these classes as
necessary to manipulate your own connector-specific data. </li> <li> Most of the remaining
objects have self-documenting names; for more summary info, see the Use view of the <a
href="http://www.corp.google.com/%7Eziff/ConnectorSPI/" target="blank_" title="Google
Connector Framework API Reference">Javadoc reference</a> to the connector framework. </li>
</ul> <div style="MARGIN-LEFT:40px"> <span style="COLOR:#cc0000">&lt;!-- these particular
javadocs are in max's home directory; update this link when they are browsable on
code.google.com --&gt;<br/> &nbsp;<br/> </span> </div> <br/> <h3> Setting Up </h3> You do
not need a Google search appliance to begin development of your connector. However, you do
need to create an isolated network that you can use to test development versions of your
connector. This testing network must provide a connector host machine and an ECM system.
You'll also need a way to transfer a .jar file from your development system to the
Connector Manager host machine on the testing network.<br/> <br/> Without the full
implemenation of the connector manager, you can implement crawling, feeding, and query
functionality. At present, the only way to configure a connector is by means of its Spring
file, as the Google search appliance that provides a user interface for administration of
connectors is not yet available. Again, return to this site regularly for updated
information.<br/> <br/> <h3> Background Knowledge<br/> </h3> Before attempting to design
your connector, you should be familiar with the following:<br/> <br/> <ul
style="COLOR:#000000"> <li> You should understand the <span style="COLOR:#000000">use of
cookies by Web services; in particular, you should know how to implant a cookie in a Web
browser and retrieve it. </span> </li> </ul> <ul style="COLOR:#000000"> <li> <span
style="COLOR:#000000"> You should be familiar with the basic concepts behind ECM
systems</span>. </li> </ul> <ul style="COLOR:#000000"> <li> You must have strong
experience with the specific ECM system for which you intend to create a Java connector.
In particular, you need to have hands-on understanding of the API your ECM system provides
for:<br/> </li> </ul> <ul style="MARGIN-LEFT:40px"> <li style="COLOR:#000000">
authenticating its users<br/> </li>  <li style="COLOR:#000000"> authorizing user access to
documents </li> <li style="COLOR:#000000"> single-sign-on (if applicable; not all ECM
systems provide single-sign-on functionality)<br/> </li> <li style="COLOR:#000000">
retrieving documents by query<br/> </li> </ul> <br/> <ul> <li> You'll also need to
understand <span style="COLOR:#000000">how Google search appliances work</span>; in
particular, the APIs Google provides for calling the crawl and feed mechanisms. </li>
</ul> <br/> <ul> <li> Google recommends strongly that your connector implement Single
Sign-On functionality; to do so, you'll need to make use of a use a network-based <span
style="COLOR:#000000">identity provider</span> (such as <span style="COLOR:#000000">SAML,
LDAP, Netegrity, or another such solution.)</span> </li> </ul> <br/> <p style=""> </p>
<h2> <font size="3">Community</font> </h2> <span style="COLOR:#3333ff"> </span>A vast
community of Java developers ready to communicate and collaborate with you is just a click
away. This section presents links to information and resources that may be useful in your
connector-development endeavors.<br/> <br/> <span
style="FONT-WEIGHT:bold">Discussion</span><br/> <span style="COLOR:#3333ff"></span><br/>
<span style="COLOR:#cc0000">&lt;!-- placeholder for link to our own connector discussion
forum --&gt;</span><br/> <span style="COLOR:#cc0000"> </span><br/> <span
style="COLOR:#cc0000"> </span><span style="FONT-WEIGHT:bold">Tools</span><br/> <br/> <a
href="http://subversion.tigris.org/" title="Subversion project web site
">http://subversion.tigris.org</a><br/> Home page of the Subversion project web site<br/>
<br/> <a href="http://eclipse.org" title="Download Eclipse, the open-source Java
IDE">http://eclipse.org</a><br/> Downloads, discussion, and resources for users of the
Eclipse open-source Java IDE<br/> <br/> <span
style="FONT-WEIGHT:bold">Resources</span><br/> <br/> <a href="http://theserverside.com/"
target="blank_" title="resources for the Java Enterprise
community">http://theserverside.com</a><br/> White papers, news, forums, and other
resources for the Enterprise Java Community, including the <a
href="http://www.theserverside.com/tt/articles/article.tss?l=SpringFramework"
target="blank_" title="info about the Spring Framework, Dependency Injection, and
more">Introduction to the Spring Framework</a> article, by Rod Johnson.<br/> <br/> <br/>
<div style="MARGIN-LEFT:40px"> <br/> <br/> <p style=""> <br/> </p> </div> <table
border="0" cellpadding="0" cellspacing="0" width="100%"> <tbody> <tr> <td
bgcolor="#676767"> <img height="1"
src="https://writely.corp.google.com/images/blankdot.gif"/> </td> </tr> <tr> <td
align="center"> <table border="0" cellpadding="8" cellspacing="0" width="100%"> <tbody>
<tr> <td> <a class="smalllink" href="https://writely.corp.google.com/" title="Learn more
about Google Docs &amp; Spreadsheets">Google Docs &amp; Spreadsheets -- Web word
processing and spreadsheets.</a> </td> <td align="right"> <a class="smalllink"
href="https://writely.corp.google.com/Edit?tab=edit&amp;docid=ag39np58q3_4gp947c"
title="Edit this page">Edit this page (if you have permission).</a> </td> </tr> </tbody>
</table> </td> </tr> </tbody> </table> </div>

</body>
</html>