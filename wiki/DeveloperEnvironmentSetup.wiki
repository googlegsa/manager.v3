#summary Directions for setting up a developer environment

= Introduction =

These instructions are intended for developers who want to develop a new connector for Google Search Appliance, using the Connector Manager or who want to work on the Connector Manager itself.  

The steps in this document are suggestions, not requirements.  For example, Ant and Eclipse are not required, but that is the only scenario we describe here.  You are free to use whatever development tools you like! 

== Prerequisites ==

Install [http://ant.apache.org/ Apache Ant], [http://www.eclipse.org/ Eclipse], and [http://tomcat.apache.org/ Tomcat].  See those websites for download and installation instructions.

Install a subversion (svn) client.  See the [http://code.google.com/p/google-enterprise-connector-manager/ Connector Manager Code Site] (under the "Source" tab) for a list of svn clients.

For building tests, download the JSR-170 api: jcr-1.0.jar.  See the [http://jcp.org/en/jsr/detail?id=170 JSR-170] Site.

Note on the JDK version: the connector manager is designed so that it can be built and run using JDK 1.5.0.  It should work fine with newer JDKs.

== Checking out the Connector Manager Code ==

Create a new empty directory.  You may use any name for this directory, but for clarity we will use "connector-manager" in the decriptions below.  Checkout the Connector Manager code into the "connector-manager" directory.  Use the svn client of your choice.  Point the client to the Connector Manager Code Site, and supply your name and password if required. 

== Directory Layout ==

Inside the connector-manager directory, you will find the following directories (this list is not complete):

  * {{{projects/}}}
    * {{{connector-manager/}}}
      * {{{etc/}}}
      * {{{source/}}}
        * {{{java/}}}
        * {{{javatests/}}}
      * {{{testdata/}}}
      * {{{third-party/}}}
        * {{{prod/}}}
        * {{{test/}}}
    * {{{test-connectorA/}}}
    * {{{test-connectorB/}}}

== Copy the JCR Jar to the Right Place ==

IMPORTANT: Copy the jcr-1.0.jar to {{{connector-manager/projects/connector-manager/third-party/test/}}}.

== Verify that the Connector Manager Builds ==

Use a shell or command window and change directory into the {{{connector-manager/projects}}} directory.  Run "ant" in that directory.  There should be no errors reported.  A common cause of problems here is not copying the jcr-1.0.jar to the proper place.

== Set up Eclipse Projects ==

For clarity, the following directions assume that you will create a new eclipse workspace for this development.  This is not required.  It is possible to use an existing eclipse workspace, but the steps you would then follow would be subtly different, depending on the state of your current workspace. 

  # Start up eclipse.  Point it to a new workspace.  This workspace should be a new directory, independent from the directory into which you checked out the connector-manager svn repository.
  # Go to {{{Window->Preferences->Java->Compiler}}}.  Set Compiler Compliance Level to 1.5.
  # Go to {{{Window->Preferences->Java->Installed JREs}}}.  Make sure you have a 1.5.0 JRE or JDK and make it the default for this workspace.
  # Create the following four projects, {{{connector-manager}}}, {{{third_party}}}, {{{test-connectorA}}} and {{{test-connectorB}}}.  For each one, follow these steps (replace {{{project-name}}} appropriately.
    * {{{File->New->Project}}}.  Choose {{{Java Project}}} and click {{{Next}}}
    * Fill in the project-name.
    * Choose {{{Create project from existing source}}} and browse to the sub-directory under {{{projects}}} in your svn checkout directory whose name corresponds to the project-name.  For example, the directory for the {{{connector-manager}}} project is {{{connector-manager/projects/connector-manager}}}.
  # There should be no errors shown although there may be warnings.  It may be necessary to clean the connector-manager project.  To do so, select that project, then choose {{{Project->Clean}}}
  # Verify that all is well by running the unit tests through eclipse.  Right-click on the connector-manager project and choose {{{Run As->Junit Test}}}.  All tests should be green.

== Source Code Conventions ==

The coding style guidelines used in the project are based upon the general [http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html Code Conventions for Java], with additional guidelines as detailed below.

However, since development is done on both Microsoft Windows and Unix platforms, two conventions *must* be adhered to in order to avoid massive differences when merging code:
  # Use spaces, not embedded tabs, for indenting code.
  # All text files (including source code) added to the repository must include the `svn:eol-style=native` property (see below) to ensure that line-endings are converted properly on checkin and checkout.

Additional Coding Style Guidelines:
  # Exceptions: Never catch and ignore them without explanation.
  # Exceptions: do not catch generic Exception.
  # Finalizers: generally don't use them
  # Imports: Fully qualify imports
  # !FileHeader: use standard style
  # Javadoc: write it
  # Short methods: don't write giant methods
  # Fields: should either be at the top of the file, or immediately before the methods that use them
  # Local variables: limit the scope
  # Imports: third party alphabetical ; java(x)
  # Indentation: 2 spaces, 4 spaces on a continuation, no tabs.
  # Line length: 80 columns
  # Annotations: Use the standard annotations.
  # Acronyms are words: Treat acronyms as words in names, yielding XmlHttpRequest, getUrl(), etc.
  # TODO style: "TODO(userid): Write this description."
  # Consistency: Look at what's around you!

== Configuring Subversion Automatic Properties ==

To minimize cross platform development pain, all plain text files added to the repository should have a subversion `svn:eol-style=native` property set.  This is easily done with by configuring automatic properties in your subversion configuration file.  To do so:

  # Edit your Subversion configuration file,  typically `~/.subversion/config`
  # Enable automatic properties if it is not already enabled:
{{{
### Set enable-auto-props to 'yes' to enable automatic properties
### for 'svn add' and 'svn import', it defaults to 'no'.
### Automatic properties are defined in the section 'auto-props'.
enable-auto-props = yes
}}}
  # Under the `[auto-props]` section of the file, add `svn:eol-style` and `svn:mime-type` properties for the various types of text files in the project:
{{{
## These are for Google Development
*.java = svn:eol-style=native;svn:mime-type=text/x-java
*.properties = svn:eol-style=native;svn:mime-type=text/plain
*.txt = svn:eol-style=native;svn:mime-type=text/plain
*.xml = svn:eol-style=native;svn:mime-type=text/xml
*.html = svn:eol-style=native
*.css = svn:eol-style=native
}}}
  # Save the configuration file.