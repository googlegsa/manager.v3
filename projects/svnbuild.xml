<!-- Version-related Ant targets, useful for building the version
     string and repackaging the downloads.  Include this in your
     build.xml as <include file="${path.to}/svnbuild.xml" as="svn" />
     The legacy "svn" naming has been retained for backward compatibility.
-->
<project name="version-tools">

  <!-- The root of the git working set, typically the checked out tree.
       The including build file may wish to override this.
  -->
  <property name="svn.base.dir" value=".." />

  <!-- Fetch the Git branch for the working set.
       This is typically the master branch, a release branch, or a tag.
       The output of the command is stored in the property svn.branch
       The execution result code (typically 0 for success) is stored in
       svn.branch.result.
  -->
  <target name="svn-branch">
    <!-- This works on tags but fails on branches. -->
    <exec executable="git"
          spawn="false"
	        failifexecutionfails="false"
          dir="${svn.base.dir}"
          outputproperty="git.tag"
          resultproperty="git.tag.result" >
      <arg line="describe --tags" />
    </exec>
    <!-- This works on branches but fails on tags. -->
    <exec executable="git"
          spawn="false"
	  failifexecutionfails="false"
          dir="${svn.base.dir}"
          outputproperty="git.branch"
          resultproperty="git.branch.result" >
      <arg line="rev-parse --abbrev-ref HEAD" />
    </exec>
    <!-- Pick the one that worked. -->
    <condition property="svn.branch"
               value="${git.tag}"
               else="${git.branch}">
      <equals arg1="0" arg2="${git.tag.result}" />
    </condition>
    <condition property="svn.branch.result"
               value="${git.tag.result}"
               else="${git.branch.result}">
      <equals arg1="0" arg2="${git.tag.result}" />
    </condition>
  </target>

  <!-- Get the abbreviated commit hash for the latest commit.
       The output of the command is stored in the property svn.version.
       The execution result code (typically 0 for success) is stored in
       svn.version.result.
  -->
  <target name="svn-version">
    <exec executable="git"
          spawn="false"
	        failifexecutionfails="false"
          dir="${svn.base.dir}"
          outputproperty="svn.version"
	        resultproperty="svn.version.result" >
      <arg line="show -s --pretty=format:%h"/>
    </exec>
  </target>

  <!-- Construct the Git-related components of the JAR version string.
       The generated result is stored in the property svn.branch.version.
  -->
  <target name="svn-branch-version" depends="svn-branch,svn-version">
    <condition property="svn.branch.version"
	             value="${svn.version} ${svn.branch}"
                     else="?? Unknown Git version">
      <and>
        <equals arg1="0" arg2="${svn.branch.result}" />
        <equals arg1="0" arg2="${svn.version.result}" />
      </and>
    </condition>
    <echo message="svn.branch.version set to '${svn.branch.version}'" />
  </target>

  <macrodef name="repackage-zip"
            description="Repackage release candidate ZIP file for release.">
    <attribute name="destfile" description="Repackaged release ZIP file."/>
    <attribute name="src" description="Original downloads ZIP file."/>
    <attribute name="downloads.prefix" description="Original name prefix."/>
    <attribute name="repackage.prefix" description="Repackaged name prefix."/>
    <sequential>
      <fail>
        <condition>
          <equals arg1="@{src}" arg2="@{destfile}" casesensitive="false" />
        </condition>
        Unable to repackage ZIP files when the source and destination <!--
        -->are the same: @{destfile}
      </fail>
      <zip destfile="@{destfile}">
        <mappedresources>
          <zipfileset src="@{src}" />
          <globmapper from="@{downloads.prefix}*"
                      to="@{repackage.prefix}*" />
        </mappedresources>
      </zip>
      <checksum algorithm="SHA-1" file="@{destfile}" />
    </sequential>
  </macrodef>

  <macrodef name="repackage-downloads"
            description="Repackage release candidate files for release.">
    <attribute name="downloads.dir" description="Directory for all files."/>
    <attribute name="downloads.prefix" description="Original name prefix."/>
    <attribute name="repackage.prefix" description="Repackaged name prefix."/>
    <sequential>
    <echo message="Repackaging ${downloads.prefix} as ${repackage.prefix}." />
    <repackage-zip destfile="@{downloads.dir}/@{repackage.prefix}-src.zip"
                   src="@{downloads.dir}/@{downloads.prefix}-src.zip"
                   downloads.prefix="@{downloads.prefix}"
                   repackage.prefix="@{repackage.prefix}" />
    <repackage-zip destfile="@{downloads.dir}/@{repackage.prefix}.zip"
                   src="@{downloads.dir}/@{downloads.prefix}.zip"
                   downloads.prefix="@{downloads.prefix}"
                   repackage.prefix="@{repackage.prefix}" />
    </sequential>
  </macrodef>

</project>
