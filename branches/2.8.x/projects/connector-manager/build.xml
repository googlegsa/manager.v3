<?xml version="1.0" encoding="UTF-8"?>

<project name="connector-manager" default="connector_manager" basedir=".">

  <!-- ========================= PROPERTIES ============================= -->
  <property name="version" value="2.0" />
  <property name="jvm.version" value="1.5" />

  <!-- Define Directories. -->
  <property name="projects.dir" value=".." />

  <property name="COMPILE_DEBUG_FLAG" value="true" />
  <property name="COMPILE_DEBUG_LEVEL" value="source,lines,vars" />

  <property name="build" value="build" />
  <property name="prod" value="${build}/prod" />
  <property name="dist" value="dist" />
  <property name="src" value="source/java" />
  <property name="classes" value="${prod}/classes" />
  <property name="spi-classes" value="${prod}/spi-classes" />
  <property name="resources" value="source/resources" />
  <property name="dtds" value="source/dtds" />
  <property name="webdocs" value="source/webdocs" />
  <property name="webcontent" value="source/html" />

  <property name="tests.src" value="source/javatests" />
  <property name="tests.build" value="${build}/tests" />
  <property name="tests.classes" value="${tests.build}/classes" />
  <property name="tests.todir" value="tests_outdir" />
  <property name="tests.data" value="testdata" />
  <property name="tests.config" value="${tests.data}/config" />
  <property name="jar.dir" value="${dist}/jarfile" />

  <property name="logging.jarfile" value="${jar.dir}/connector-logging.jar" />
  <property name="spi.jarfile" value="${jar.dir}/connector-spi.jar" />
  <property name="util.jarfile" value="${jar.dir}/connector-util.jar" />
  <property name="connector.jarfile" value="${jar.dir}/connector.jar" />
  <property name="tests.jarfile" value="${jar.dir}/connector-tests.jar" />

  <property name="thirdparty.prod.jars" value="third-party/prod" />
  <property name="thirdparty.tests.jars" value="third-party/tests" />

  <property name="junit.jarfile" value="${thirdparty.prod.jars}/junit.jar" />
  <property name="junit.logging.properties" value="${tests.config}/logging.properties" />

  <!-- The directory where all war-files are collected -->
  <property name="war.dir" value="${dist}/${ant.project.name}" />

  <!-- =========================== TASKS =============================== -->
  <target name="test_connector_jars">
    <ant inheritAll="false" dir="${projects.dir}/test-connectorA" />
    <ant inheritAll="false" dir="${projects.dir}/test-connectorB" />
  </target>

  <target name="connector_manager" depends="war-prod"
          description="Google Search Appliance Connector Manager" />

  <target name="all" depends="war" />

  <target name="everything" depends="all,run_tests" />

  <target name="connector_spi" depends="init,compile,jar" />

  <target name="spi-javadoc">
    <javadoc access="public" author="false" destdir="doc/javadoc/${version}"
             doctitle="Google Search Appliance Connector SPI"
             nodeprecated="false" nodeprecatedlist="true" noindex="false"
             nonavbar="false" notree="false" source="${jvm.version}"
             sourcepath="${src}" overview="${src}/overview.html"
             splitindex="true" use="true" version="true">
      <classpath>
        <fileset dir="${thirdparty.prod.jars}" includes="**/*.jar" />
      </classpath>
      <package name="com.google.enterprise.connector.spi"/>
      <package name="com.google.enterprise.connector.util"/>
    </javadoc>
  </target>

  <target name="init">
    <mkdir dir="${build}" />
    <mkdir dir="${prod}" />
    <mkdir dir="${dist}" />
    <mkdir dir="${classes}" />
    <mkdir dir="${spi-classes}" />
    <mkdir dir="${tests.build}" />
    <mkdir dir="${tests.classes}" />
    <mkdir dir="${tests.todir}" />
    <mkdir dir="${tests.data}/tmp" />
    <mkdir dir="${jar.dir}" />
  </target>

  <target name="compile-spi" depends="init">
    <!-- compile the spi java source files -->
    <javac sourcepath="" srcdir="${src}" destdir="${spi-classes}"
    	     includes="**/spi/**, **/spiimpl/**, **/util/**"
           includeantruntime="false"
           debug="${COMPILE_DEBUG_FLAG}" debuglevel="${COMPILE_DEBUG_LEVEL}"
           target="${jvm.version}" source="${jvm.version}">
    	<classpath>
        <fileset dir="${thirdparty.prod.jars}" includes="**/*.jar" />
        <fileset dir="${thirdparty.tests.jars}" includes="**/*.jar" />
     </classpath>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
    </javac>
  </target>

  <target name="jar-spi" depends="compile-spi"
          description="Create production spi jar">
    <tstamp />
    <jar jarfile="${spi.jarfile}">
      <fileset dir="${spi-classes}"/>
      <fileset dir="${dtds}">
        <include name="*.dtd" />
        <include name="*.ent" />
      </fileset>
      <manifest>
        <attribute name="Implementation-Title" value="Connector Manager SPI"/>
        <attribute name="Implementation-Version"
                   value="${version} (build ${svnversion}  ${TODAY})"/>
        <attribute name="Implementation-Vendor" value="Google Inc."/>
      </manifest>
    </jar>
  </target>

  <target name="compile" depends="init,jar-spi">
    <!-- compile java source files -->
    <javac sourcepath="" srcdir="${src}" destdir="${classes}"
           excludes="**/spi/**, **/spiimpl/**, **/util/**"
           includeantruntime="false"
           debug="${COMPILE_DEBUG_FLAG}" debuglevel="${COMPILE_DEBUG_LEVEL}"
           target="${jvm.version}" source="${jvm.version}">
      <classpath>
        <fileset dir="${thirdparty.prod.jars}" includes="**/*.jar" />
        <pathelement location="${spi.jarfile}"/>
     </classpath>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
    </javac>
  </target>

  <target name="jar-prod" depends="compile,jar-spi"
          description="Create production jars for the Connector SPI project">
    <tstamp />
    <jar jarfile="${logging.jarfile}">
      <fileset dir="${classes}" includes="**/logging/**" excludes="**/javatests/**" />
      <manifest>
        <attribute name="Implementation-Title" value="Connector Manager Logging"/>
        <attribute name="Implementation-Version"
                   value="${version} (build ${svnversion}  ${TODAY})"/>
        <attribute name="Implementation-Vendor" value="Google Inc."/>
      </manifest>
    </jar>
    <jar jarfile="${util.jarfile}">
      <fileset dir="${classes}">
        <include name="**/servlet/ConnectorMessageCode.class" />
        <include name="**/servlet/ServletUtil.class" />
        <include name="**/servlet/SAXParseErrorHandler.class" />
      </fileset>
      <manifest>
        <attribute name="Implementation-Title" value="Connector Manager Utility"/>
        <attribute name="Implementation-Version"
                   value="${version} (build ${svnversion}  ${TODAY})"/>
        <attribute name="Implementation-Vendor" value="Google Inc."/>
      </manifest>
    </jar>
    <pathconvert property="connector.jar.manifest.classpath" pathsep=" ">
      <flattenmapper/>
      <path id="manifest.classpath">
        <pathelement location="${spi.jarfile}" />
        <pathelement location="${logging.jarfile}" />
        <pathelement location="${util.jarfile}" />
        <fileset dir="${thirdparty.prod.jars}" includes="**/*.jar" />
      </path>
    </pathconvert>
    <jar jarfile="${connector.jarfile}">
      <fileset dir="${classes}" includes="**/*.class" excludes="**/spi/**, **/util/**, **/logging/**"/>
      <fileset dir="${resources}" includes="**"/>
      <manifest>
        <attribute name="Implementation-Title" value="Connector Manager Impl"/>
        <attribute name="Implementation-Version"
                   value="${version} (build ${svnversion}  ${TODAY})"/>
        <attribute name="Implementation-Vendor" value="Google Inc."/>
        <attribute name="Main-Class"
                   value="com.google.enterprise.connector.manager.ManagerMain" />
        <attribute name="Class-Path"
                   value="${connector.jar.manifest.classpath}" />
      </manifest>
    </jar>
  </target>

  <target name="compile_tests" depends="init,jar-prod">
    <!-- compile java source files for tests -->
    <javac srcdir="${tests.src}" destdir="${tests.classes}"
           includeantruntime="false"
           debug="${COMPILE_DEBUG_FLAG}" debuglevel="${COMPILE_DEBUG_LEVEL}"
           target="${jvm.version}" source="${jvm.version}">
      <classpath>
        <pathelement location="${spi.jarfile}"/>
        <pathelement location="${connector.jarfile}"/>
        <fileset dir="${thirdparty.prod.jars}" includes="**/*.jar" />
        <fileset dir="${thirdparty.tests.jars}" includes="**/*.jar" />
     </classpath>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
      <compilerarg value="-Xlint:-deprecation"/>
      <compilerarg value="-Xlint:-path"/>
    </javac>
  </target>

  <target name="jar-tests" depends="compile,compile_tests"
          description="Create test jars for the Connector SPI project">
    <tstamp />
    <jar jarfile="${tests.jarfile}">
      <fileset dir="${tests.classes}" includes="**/*.class" />
      <manifest>
        <attribute name="Implementation-Title" value="Connector Manager Tests"/>
        <attribute name="Implementation-Version"
                   value="${version} (build ${svnversion}  ${TODAY})"/>
        <attribute name="Implementation-Vendor" value="Google Inc."/>
      </manifest>
    </jar>
  </target>

  <target name="run_tests" depends="jar-tests">
    <property name="test.suite" value="*"/>
    <junit failureproperty="${ant.project.name}.failure" dir=".">
      <classpath>
        <fileset dir="${thirdparty.prod.jars}" includes="**/*.jar" />
        <fileset dir="${thirdparty.tests.jars}" includes="**/*.jar" />
        <pathelement location="${spi.jarfile}"/>
        <pathelement location="${connector.jarfile}"/>
        <pathelement location="${tests.jarfile}"/>
        <pathelement location="${projects.dir}/test-connectorA/dist/jar/testconnectorA.jar" />
        <pathelement location="${projects.dir}/test-connectorB/dist/jar/testconnectorB.jar" />
        <pathelement location="${dtds}" />
        <pathelement path="${java.class.path}" />
        <!-- Needed for those tests that must find resources on the classpath. -->
        <pathelement location="${tests.src}" />
      </classpath>
      <jvmarg value="-Djava.util.logging.config.file=${junit.logging.properties}"/>
      <formatter type="xml" />
      <batchtest fork="yes" todir="${tests.todir}">
        <fileset dir="${tests.src}" includes="**/${test.suite}Test.java" />
      </batchtest>
    </junit>
    <junitreport todir="${tests.todir}">
      <fileset dir="${tests.todir}">
        <include name ="*.xml"/>
      </fileset>
      <report format="frames" todir="${tests.todir}"/>
    </junitreport>
    <fail if="${ant.project.name}.failure" message="Test failure"/>
  </target>

  <target name="doc_store_bench" depends="jar-tests">
    <java fork="true" maxmemory="1024m"
          classname="com.google.enterprise.connector.util.database.DocStoreBench">
      <!-- Specify the command line args to DocStoreBench with -Dargs
           For example: -Dargs="-b 500 -t 5"
      -->
      <arg line="${args}" />
      <jvmarg value="-Xshare:off"/>
      <jvmarg value="-Djava.util.logging.config.file=${junit.logging.properties}"/>
      <classpath>
        <fileset dir="${thirdparty.prod.jars}" includes="**/*.jar" />
        <fileset dir="${thirdparty.tests.jars}" includes="**/*.jar" />
        <pathelement location="${spi.jarfile}"/>
        <pathelement location="${connector.jarfile}"/>
        <pathelement location="${tests.jarfile}"/>
        <pathelement location="${dtds}" />
        <pathelement path="${java.class.path}" />
        <!-- Needed for those tests that must find resources on the classpath. -->
        <pathelement location="${tests.src}" />
      </classpath>
    </java>
  </target>

  <target name="jar" depends="jar-prod,jar-tests"
          description="Create jars for the Connector SPI project"/>

  <target name="clean" description="Deletes all build files.">
    <delete dir="${build}" />
    <delete dir="${dist}" />
    <delete dir="${tests.todir}" />
    <delete dir="${tests.todir}" />
    <delete dir="${tests.data}/tmp" />
  </target>

  <!-- ======================Installation targets====================== -->

  <target name="install_init">
    <mkdir dir="${war.dir}" />
  </target>

  <!--  Builds a Web Archive - basically a JAR file which
        also contains all and can be deployed as-is.
  -->

  <target name="war" depends="war-prod,war-tests"
          description="Builds the Test and Production WAR files."/>

  <target name="war-prod" depends="install_init,jar-prod"
          description="Builds the Production WAR file for installation.">
    <echo> The production war file dir is located at ${war.dir}</echo>

    <tstamp />
    <war warfile="${war.dir}/${ant.project.name}.war" webxml="${webdocs}/web.xml">
      <fileset dir="${webcontent}" />
      <lib dir="${jar.dir}" includes="*.jar" excludes="connector-tests.jar" />
      <lib dir="${thirdparty.prod.jars}" includes="*.jar" excludes="servlet-api.jar" />
      <webinf dir="etc" includes="**" />
      <manifest>
        <attribute name="Implementation-Title" value="Connector Manager"/>
        <attribute name="Implementation-Version"
                   value="${version} (build ${svnversion}  ${TODAY})"/>
        <attribute name="Implementation-Vendor" value="Google Inc."/>
      </manifest>
    </war>
  </target>

  <target name="war-tests" depends="install_init,jar,test_connector_jars"
          description="Builds the Test WAR file for installation.">
    <echo> The test war file dir is located at ${war.dir}</echo>

    <tstamp />
    <war warfile="${war.dir}/${ant.project.name}_debug.war" webxml="${webdocs}/web.xml">
      <fileset dir="${webcontent}" />
      <lib dir="${jar.dir}" includes="*.jar" />
      <lib dir="${thirdparty.prod.jars}" includes="*.jar" excludes="servlet-api.jar" />
      <webinf dir="etc" includes="**" />
      <!-- above this line is all the stuff that goes in the normal prod jar,
           below is the stuff that is only needed for testing -->
      <lib dir="${thirdparty.tests.jars}" includes="*.jar" />
      <lib dir="${projects.dir}/test-connectorA/dist/jar" includes="*.jar" />
      <lib dir="${projects.dir}/test-connectorB/dist/jar" includes="*.jar" />
      <webinf dir="${tests.data}/mocktestdata" includes="MockRepositoryEventLog*.txt" />
      <webinf dir="${tests.data}/mocktestdata" includes="test.doc" />
      <manifest>
        <attribute name="Implementation-Title" value="Connector Manager"/>
        <attribute name="Implementation-Version"
                   value="${version} (build ${svnversion}  ${TODAY})"/>
        <attribute name="Implementation-Vendor" value="Google Inc."/>
      </manifest>
    </war>

  </target>

</project>
