// Copyright (C) 2008 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.enterprise.saml.server;

import com.google.common.collect.ImmutableMap;
import com.google.enterprise.connector.instantiator.InstantiatorException;
import com.google.enterprise.connector.manager.ConnectorManager;
import com.google.enterprise.connector.manager.ConnectorStatus;
import com.google.enterprise.connector.persist.ConnectorNotFoundException;
import com.google.enterprise.connector.persist.PersistentStoreException;
import com.google.enterprise.connector.spi.AuthenticationResponse;
import com.google.enterprise.saml.common.GettableHttpServlet;
import com.google.enterprise.saml.common.GsaConstants;
import com.google.enterprise.saml.common.PostableHttpServlet;
import com.google.enterprise.saml.common.SecurityManagerServlet;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Handler for SAML authentication requests.  These requests are sent by a service provider, in our
 * case the Google Search Appliance.  This is one part of the security manager's identity provider.
 */
public class SamlAuthn extends SecurityManagerServlet
    implements GettableHttpServlet, PostableHttpServlet {

  /** Required for serializable classes. */
  private static final long serialVersionUID = 1L;
  private static final Logger LOGGER = Logger.getLogger(SamlAuthn.class.getName());

  /**
   * Accept an authentication request and (eventually) respond to the service provider with a
   * response.  The request is generated by the service provider, then sent to the user agent as a
   * redirect.  The user agent redirects here, with the SAML AuthnRequest message encoded as a query
   * parameter.
   *
   * It's our job to authenticate the user behind the agent.  At the moment we respond with a
   * trivial form that prompts for username and password, but soon this will be replaced by
   * something more sophisticated.  Once the user agent posts the credentials, we validate them and
   * send the response.
   */
  @Override
  public void doGet(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
    String gsaUrlString = getGsaUrlString(request);
    response.setContentType("text/html");

    LOGGER.info("gsaUrlString: " + gsaUrlString);

    // If there's a cookie we can decode, use that
    if (tryCookies(request, response)) {
      return;
    }

    // Otherwise, query the user
    PrintWriter out = initNormalResponse(response);
    out.print("<html><head><title>Please Login</title></head><body>\n" +
              "<form action=\"" +
              request.getRequestURI() + "?Referer=" + gsaUrlString +
              "&" + request.getQueryString() +
              "\" method=POST>\n" +
              "User Name:<input type=text size=20 name=username><br>\n" +
              "Password:<input type=password size=20 name=password><br>\n" +
              "<input type=submit>\n" +
              "</form>\n" +
              "</body></html>\n");
    out.close();
  }

  /**
   * Try to find a cookie that can be decoded into an identity.
   *
   * @param request The HTTP request message.
   * @param response The HTTP response message.  Filled in if a suitable cookie was found.
   * @return Whether or not a usable cookie was found.
   */
  private boolean tryCookies(HttpServletRequest request, HttpServletResponse response)
      throws IOException {
    Map<String, String> cookieJar = getCookieJar(request);
    return
        (cookieJar != null) &&
        handleAuthn(response, getGsaUrlString(request),
                    request.getParameter(GsaConstants.GSA_RELAY_STATE_PARAM_NAME),
                    null, null, cookieJar);
  }

  private String getGsaUrlString(HttpServletRequest request) {
    return request.getHeader("Referer")
        .substring(0, request.getHeader("Referer").indexOf("search?"));
  }

  /**
   * If this request carries cookies, we use registered security connectors to
   * figure out the user identity from the cookie.
   *
   * @param request The HTTP request message.
   * @return A Map of cookies, or null if no cookies.
   */
  private Map<String, String> getCookieJar(HttpServletRequest request) {
    Cookie[] jar = request.getCookies();
    if ((jar == null) || (jar.length == 0)) {
      return null;
    }
    Map<String, String> cookieJar = new HashMap<String, String>(jar.length);
    for (Cookie c: jar) {
      cookieJar.put(c.getName(), c.getValue());
    }
    return cookieJar;
  }

  private boolean handleAuthn(HttpServletResponse response,
      String gsaUrlString, String relay, String username, String password,
      Map<String, String> cookieJar) throws IOException {

    ConnectorManager manager = getConnectorManager(getServletContext());
    for (ConnectorStatus connStatus: getConnectorStatuses(manager)) {
      String connectorName = connStatus.getName();
      LOGGER.info("Got security plug-in " + connectorName);

      // Does this connector know how to crack any of our cookies?
      AuthenticationResponse authnResponse =
        manager.authenticate(connectorName, username, password, cookieJar);
      if ((authnResponse != null) && authnResponse.isValid()) {

        // Yes, it does.  No need to gather credentials; just generate a successful response.
        // TODO make sure authnResponse has subject in BackEnd
        String subject = (authnResponse.getData() == null) ? username :
          authnResponse.getData();
        String redirectUrl = manager.getBackEnd().loginRedirect(gsaUrlString, relay, subject);

        if (redirectUrl == null) {
          response.setStatus(HttpServletResponse.SC_NOT_FOUND);
          response.sendError(404);
          return true;
        }

        response.setStatus(HttpServletResponse.SC_FOUND);
        response.sendRedirect(redirectUrl);
        return true;
      }
    }

    return false;
  }

  @SuppressWarnings("unchecked")
  private List<ConnectorStatus> getConnectorStatuses(ConnectorManager manager) {
    List<ConnectorStatus> connList = manager.getConnectorStatuses();
    if (connList == null || connList.isEmpty()) {
      instantiateConnector(manager);
      connList = manager.getConnectorStatuses();
    }
    return connList;
  }

  /**
   * Extract the username and password from the parameters, then ask the backend to validate them.
   * The backend returns the appropriate SAML Response message, which we then encode and return to
   * the service provider.  At the moment we only support the Artifact binding for the response.
   *
   * @param request The HTTP request message.
   * @param response The HTTP response message.
   */
  @Override
  public void doPost(HttpServletRequest request, HttpServletResponse response)
      throws IOException {
    response.setContentType("text/html");
    response.setCharacterEncoding("UTF-8");

    String username = request.getParameter("username");
    String password = request.getParameter("password");
    if (username.length() < 1 || password.length() < 1) {
      PrintWriter out = response.getWriter();
      out.println("<title>Error</title>");
      out.println("No user name or password entered");
      out.close();
      return;
    }

    LOGGER.info("gsaUrlString: " + request.getParameter("Referer"));
    if (!handleAuthn(response,
          request.getParameter("Referer"),
          request.getParameter(GsaConstants.GSA_RELAY_STATE_PARAM_NAME),
          username, password, null)) {
      // The user is not authenticated, respond with DENY
      response.setStatus(HttpServletResponse.SC_NOT_FOUND);
      response.sendError(404);
    }
  }

  // TODO get rid of this when we have a way of configuring plug-ins
  private void instantiateConnector(ConnectorManager manager) {
    String connectorName = "Lei";
    String connectorType = "CookieConnector";
    String language = "en";

    Map<String, String> configData =
        ImmutableMap.of(
            "CookieName", "SMSESSION",
            "ServerUrl", "http://gama.corp.google.com/user1/ssoAgent.asp",
            "HttpHeaderName", "User-Name");
    try {
      manager.setConnectorConfig(connectorName, connectorType,
                                 configData, language, false);
    } catch (ConnectorNotFoundException e) {
      LOGGER.info("ConnectorNotFound: " + e.toString());
    } catch (InstantiatorException e) {
      LOGGER.info("Instantiator: " + e.toString());
    } catch (PersistentStoreException e) {
      LOGGER.info("PersistentStore: " + e.toString());
    }
  }
}
