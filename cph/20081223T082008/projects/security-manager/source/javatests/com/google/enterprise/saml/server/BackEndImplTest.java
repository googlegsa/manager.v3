// Copyright (C) 2008 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.enterprise.saml.server;

import junit.framework.TestCase;
import com.google.enterprise.security.manager.LocalSessionManager;
import com.google.enterprise.security.connectors.formauth.CookieUtil;
import com.google.enterprise.security.identity.AuthnDomain;
import com.google.enterprise.security.identity.AuthnDomainGroup;
import com.google.enterprise.security.identity.CredentialsGroup;
import com.google.enterprise.saml.common.GsaConstants.AuthNMechanism;

import javax.servlet.http.Cookie;
import java.util.Vector;
import java.util.ArrayList;
import java.util.List;

/**
 * Unit test for BackEndImpl.
 */
public class BackEndImplTest extends TestCase {

  private BackEndImpl backend;
  private LocalSessionManager sm;
  private AuthnDomainGroup adg1 = new AuthnDomainGroup("adg1");
  private AuthnDomainGroup adg2 = new AuthnDomainGroup("adg2");
  private AuthnDomainGroup adg3 = new AuthnDomainGroup("adg3");
  @SuppressWarnings("unused")
  private AuthnDomain basicSite = new AuthnDomain("basicDomain", AuthNMechanism.BASIC_AUTH, "basic_loginurl", adg1);
  @SuppressWarnings("unused")
  private AuthnDomain formsSite = new AuthnDomain("formsDomain", AuthNMechanism.FORMS_AUTH, "forms_loginurl", adg2);
  @SuppressWarnings("unused")
  private AuthnDomain connectorSite = new AuthnDomain("connectorDomain", AuthNMechanism.CONNECTORS, "connector_loginurl", adg3);

  public void setUp() {
    sm = new LocalSessionManager();
    backend = new BackEndImpl(sm,
                              new AuthzResponderImpl(),
                              "foo",  // loginConfigFile
                              "bar",  // ssoUrl
                              "baz"); // artifact resolution url
  }

  public void testUpdateSessionManager() {
    CredentialsGroup basicCG = new CredentialsGroup(adg1);
    basicCG.autogenerateDomainCredentials();
    CredentialsGroup formsCG = new CredentialsGroup(adg2);
    formsCG.autogenerateDomainCredentials();
    @SuppressWarnings("unused")
    CredentialsGroup connectorCG = new CredentialsGroup(adg3);

    basicCG.setUsername("user");
    basicCG.setPassword("password");

    String sid = sm.createSession();
    List<CredentialsGroup> cgList = new ArrayList<CredentialsGroup>();
    cgList.add(basicCG);
    backend.updateSessionManager(sid, cgList);
    assertEquals("user", backend.adapter.getUsername(sid));
    assertEquals("password", backend.adapter.getPassword(sid));

    formsCG.setUsername("joe");
    formsCG.setPassword("bob");
    formsCG.getElements().get(0).setCookie("cookieOne", "cookieOneVal");

    sid = sm.createSession();
    cgList.add(formsCG);
    backend.updateSessionManager(sid, cgList);
    assertEquals("user", backend.adapter.getUsername(sid));
    assertEquals("password", backend.adapter.getPassword(sid));
    Vector<Cookie> cookies = CookieUtil.deserializeCookies(backend.adapter.getCookies(sid));
    assertEquals(1, cookies.size());
    assertEquals("cookieOne", cookies.get(0).getName());
    assertEquals("cookieOneVal", cookies.get(0).getValue());
  }

}
