// Copyright (C) 2008 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.enterprise.connector.saml.server;

import com.google.common.base.Preconditions;
import com.google.enterprise.connector.common.GettableHttpServlet;
import com.google.enterprise.connector.common.PostableHttpServlet;
import com.google.enterprise.connector.common.ServletBase;
import com.google.enterprise.connector.security.identity.CredentialsGroup;
import com.google.enterprise.connector.security.identity.DomainCredentials;

import org.opensaml.common.binding.SAMLMessageContext;
import org.opensaml.saml2.binding.decoding.HTTPRedirectDeflateDecoder;
import org.opensaml.saml2.binding.encoding.HTTPArtifactEncoder;
import org.opensaml.saml2.core.Assertion;
import org.opensaml.saml2.core.Attribute;
import org.opensaml.saml2.core.AttributeStatement;
import org.opensaml.saml2.core.AudienceRestriction;
import org.opensaml.saml2.core.AuthnContext;
import org.opensaml.saml2.core.AuthnRequest;
import org.opensaml.saml2.core.Conditions;
import org.opensaml.saml2.core.NameID;
import org.opensaml.saml2.core.Response;
import org.opensaml.saml2.core.StatusCode;
import org.opensaml.saml2.metadata.AssertionConsumerService;
import org.opensaml.saml2.metadata.EntityDescriptor;
import org.opensaml.saml2.metadata.SingleSignOnService;
import org.opensaml.ws.transport.http.HttpServletRequestAdapter;
import org.opensaml.ws.transport.http.HttpServletResponseAdapter;

import java.io.IOException;
import java.util.List;
import java.util.logging.Logger;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import static com.google.enterprise.connector.saml.common.OpenSamlUtil.existingSamlMessageContext;
import static com.google.enterprise.connector.saml.common.OpenSamlUtil.initializeLocalEntity;
import static com.google.enterprise.connector.saml.common.OpenSamlUtil.initializePeerEntity;
import static com.google.enterprise.connector.saml.common.OpenSamlUtil.makeAssertion;
import static com.google.enterprise.connector.saml.common.OpenSamlUtil.makeAttribute;
import static com.google.enterprise.connector.saml.common.OpenSamlUtil.makeAttributeStatement;
import static com.google.enterprise.connector.saml.common.OpenSamlUtil.makeAttributeValue;
import static com.google.enterprise.connector.saml.common.OpenSamlUtil.makeAudience;
import static com.google.enterprise.connector.saml.common.OpenSamlUtil.makeAudienceRestriction;
import static com.google.enterprise.connector.saml.common.OpenSamlUtil.makeAuthnStatement;
import static com.google.enterprise.connector.saml.common.OpenSamlUtil.makeConditions;
import static com.google.enterprise.connector.saml.common.OpenSamlUtil.makeIssuer;
import static com.google.enterprise.connector.saml.common.OpenSamlUtil.makeResponse;
import static com.google.enterprise.connector.saml.common.OpenSamlUtil.makeStatus;
import static com.google.enterprise.connector.saml.common.OpenSamlUtil.makeSubject;
import static com.google.enterprise.connector.saml.common.OpenSamlUtil.newSamlMessageContext;
import static com.google.enterprise.connector.saml.common.OpenSamlUtil.runDecoder;
import static com.google.enterprise.connector.saml.common.OpenSamlUtil.runEncoder;

import static org.opensaml.common.xml.SAMLConstants.SAML20P_NS;
import static org.opensaml.common.xml.SAMLConstants.SAML2_ARTIFACT_BINDING_URI;

/**
 * Handler for SAML authentication requests.  These requests are sent by a service provider, in our
 * case the Google Search Appliance.  This is one part of the security manager's identity provider.
 */
public class SamlAuthn extends ServletBase
    implements GettableHttpServlet, PostableHttpServlet {
  private static final Logger LOGGER = Logger.getLogger(SamlAuthn.class.getName());

  public SamlAuthn() {
  }

  /**
   * Accept an authentication request and (eventually) respond to the service provider with a
   * response.  The request is generated by the service provider, then sent to the user agent as a
   * redirect.  The user agent redirects here, with the SAML AuthnRequest message encoded as a query
   * parameter.
   */
  @Override
  public void doGet(HttpServletRequest request, HttpServletResponse response)
      throws IOException {

    // Establish the SAML message context.
    SAMLMessageContext<AuthnRequest, Response, NameID> context =
        newSamlMessageContext(request.getSession());
    {
      EntityDescriptor localEntity = getSmEntity();
      initializeLocalEntity(context, localEntity, localEntity.getIDPSSODescriptor(SAML20P_NS),
                            SingleSignOnService.DEFAULT_ELEMENT_NAME);
    }

    // Decode the request.
    context.setInboundMessageTransport(new HttpServletRequestAdapter(request));
    runDecoder(new HTTPRedirectDeflateDecoder(), context);

    // Select entity for response.
    {
      EntityDescriptor peerEntity = getEntity(context.getInboundMessageIssuer());
      initializePeerEntity(context, peerEntity, peerEntity.getSPSSODescriptor(SAML20P_NS),
                           AssertionConsumerService.DEFAULT_ELEMENT_NAME,
                           SAML2_ARTIFACT_BINDING_URI);
    }

    // Start authentication process.
    getBackEnd().authenticate(request, response);
  }

  @Override
  public void doPost(HttpServletRequest request, HttpServletResponse response)
      throws IOException {
    getBackEnd().authenticate(request, response);
  }

  // We have at least one verified identity.  The first identity is considered the primary.
  public static void makeSuccessfulSamlSsoResponse(
      HttpServletRequest request, HttpServletResponse response, List<String> ids)
      throws IOException {
    LOGGER.info("Verified IDs: " + idsToString(ids));

    SAMLMessageContext<AuthnRequest, Response, NameID> context =
        existingSamlMessageContext(request.getSession());

    // Generate <Assertion> with <AuthnStatement>.
    Assertion assertion =
        makeAssertion(makeIssuer(getSmEntity().getEntityID()), makeSubject(ids.get(0)));
    assertion.getAuthnStatements().add(makeAuthnStatement(AuthnContext.IP_PASSWORD_AUTHN_CTX));

    // Generate <Conditions> with <AudienceRestriction>.
    Conditions conditions = makeConditions();
    AudienceRestriction restriction = makeAudienceRestriction();
    restriction.getAudiences().add(makeAudience(context.getInboundMessageIssuer()));
    conditions.getAudienceRestrictions().add(restriction);
    assertion.setConditions(conditions);

    // Generate <Response>.
    Response samlResponse =
        makeResponse(context.getInboundSAMLMessage(), makeStatus(StatusCode.SUCCESS_URI));

    // Add metadata attribute for serialized identities.
    addIdentityMetadataAttribute(
        assertion,
        BackEndImpl.class.cast(getBackEnd()).getCredentialsGroups(request));

    samlResponse.getAssertions().add(assertion);
    context.setOutboundSAMLMessage(samlResponse);
    doRedirect(request, response);
  }

  private static void addIdentityMetadataAttribute(Assertion assertion,
      List<CredentialsGroup> credentialsGroups) {
    Preconditions.checkNotNull(credentialsGroups);
    Attribute attribute = makeAttribute("serialized-ids");
    for (CredentialsGroup cg : credentialsGroups) {
      for (DomainCredentials dCred : cg.getElements()) {
        String serializedId = dCred.toJson();
        attribute.getAttributeValues().add(makeAttributeValue(serializedId));
      }
    }
    AttributeStatement attrStatement = makeAttributeStatement();
    attrStatement.getAttributes().add(attribute);
    assertion.getAttributeStatements().add(attrStatement);
  }

  private static String idsToString(List<String> ids) {
    StringBuffer buffer = new StringBuffer();
    for (String id: ids) {
      if (buffer.length() > 0) {
        buffer.append(", ");
      }
      buffer.append(id);
    }
    return buffer.toString();
  }

  public static void makeUnsuccessfulSamlSsoResponse(
      HttpServletRequest request, HttpServletResponse response, String message)
      throws IOException {
    LOGGER.warning(message);
    SAMLMessageContext<AuthnRequest, Response, NameID> context =
        existingSamlMessageContext(request.getSession());
    context.setOutboundSAMLMessage(makeResponse(context.getInboundSAMLMessage(),
                                                makeStatus(StatusCode.AUTHN_FAILED_URI, message)));
    doRedirect(request, response);
  }

  private static void doRedirect(HttpServletRequest request, HttpServletResponse response) throws IOException {
    SAMLMessageContext<AuthnRequest, Response, NameID> context =
        existingSamlMessageContext(request.getSession());
    // Encode the response message
    initResponse(response);
    context.setOutboundMessageTransport(new HttpServletResponseAdapter(response, true));
    HTTPArtifactEncoder encoder = new HTTPArtifactEncoder(null, null, getBackEnd().getArtifactMap());
    encoder.setPostEncoding(false);
    runEncoder(encoder, context);
  }
}
