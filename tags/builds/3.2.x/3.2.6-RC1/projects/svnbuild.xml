<!-- Subversion-related ant targets, useful for building the version
     string, checking if tree is modified, etc.  Include this in your
     build.xml as <include file="${path.to}/svnbuild.xml" as="svn" />
-->
<project name="svn-tools">

  <!-- The root of the svn working set, typically the checked out tree.
       The incuding build file may wish to override this.
  -->
  <property name="svn.base.dir" value=".." />

  <!-- Run Subversion Status command on the svn.base.dir.
       The output of the command is stored in the property svn.status.
       The execution result code (typically 0 for success) is stored in
       svn.status.result.
  -->
  <target name="svn-status">
    <exec executable="svn"
          spawn="false"
          failifexecutionfails="false"
          dir="${svn.base.dir}"
	        resultproperty="svn.status.result">
      <arg line="status"/>
      <redirector outputproperty="svn.status"
                  logError="true">
      </redirector>
    </exec>
  </target>

  <!-- Fetch the Subversion Repository Root for the svn working set.
       The output of the command is stored in the property svn.repository.root.
       The execution result code (typically 0 for success) is stored in
       svn.repository.root.result.
  -->
  <target name="svn-repository-root">
    <exec executable="svn"
          spawn="false"
	        failifexecutionfails="false"
          dir="${svn.base.dir}"
	        resultproperty="svn.repository.root.result" >
      <arg line="info" />
      <redirector outputproperty="svn.repository.root"
                  logError="true" >
        <outputfilterchain>
	        <linecontains>
	          <contains value="Repository Root: "/>
	        </linecontains>
          <replacestring from="Repository Root: "/>
        </outputfilterchain>
      </redirector>
    </exec>
  </target>

  <!-- Fetch the Subversion Repository branch for the svn working set.
       This is typically a branch, tag, or trunk off of the svn-root.
       The output of the command is stored in the property svn.branch
       The execution result code (typically 0 for success) is stored in
       svn.branch.result.
  -->
  <target name="svn-branch" depends="svn-repository-root">
    <exec executable="svn"
          spawn="false"
	        failifexecutionfails="false"
          dir="${svn.base.dir}"
	        resultproperty="svn.branch.result" >
      <arg line="info" />
      <redirector outputproperty="svn.branch"
                  logError="true" >
        <outputfilterchain>
	        <linecontains>
	          <contains value="URL: "/>
	        </linecontains>
          <replacestring from="URL: ${svn.repository.root}"/>
          <replaceregex pattern="/projects.*" />
          <replaceregex pattern=".*/" />
        </outputfilterchain>
      </redirector>
    </exec>
  </target>

  <!-- Run the svnversion command for the svn working set.
       The output of the command is stored in the property svn.version.
       The execution result code (typically 0 for success) is stored in
       svn.version.result.
  -->
  <target name="svn-version">
    <exec executable="svnversion"
          spawn="false"
	        failifexecutionfails="false"
          dir="${svn.base.dir}"
          outputproperty="svn.version"
	        resultproperty="svn.version.result" >
      <arg line="."/>
    </exec>
  </target>

  <!-- Construct the Subversion-related components of the JAR version string.
       The generated result is stored in the property svn.branch.version.
  -->
  <target name="svn-branch-version"
          depends="svn-repository-root,svn-branch,svn-version">
    <condition property="svn.branch.version"
	             value="${svn.version} ${svn.branch}"
	             else="?? Unknown svn version">
      <and>
        <equals arg1="0" arg2="${svn.repository.root.result}" />
        <equals arg1="0" arg2="${svn.branch.result}" />
        <equals arg1="0" arg2="${svn.version.result}" />
      </and>
    </condition>
    <echo message="svn.branch.version set to '${svn.branch.version}'" />
  </target>

  <!-- Construct the Subversion-related components of the JAR version string.
       The generated result is stored in the property svn.branch.version.
       This is more paranoid thatn svn-branch-version, in that it refuses to
       produce a version string if there are modified files in the working set.
  -->
  <target name="svn-paranoid-branch-version"
          depends="svn-repository-root,svn-branch,svn-version">
    <condition property="svn.branch.version"
	             value="${svn.version} (${svn.branch})"
	             else="?? Unknown svn version">
      <and>
        <equals arg1="0" arg2="${svn.repository.root.result}" />
        <equals arg1="0" arg2="${svn.branch.result}" />
        <equals arg1="0" arg2="${svn.version.result}" />
        <equals arg1="0" arg2="${svn.status.result}" />
	      <length string="${svn.status}" trim="true" length="0" />
      </and>
    </condition>

    <echo message="Note 'svn status' must return no changes to indicate" />
    <echo message="a working set with no local modifications to set the" />
    <echo message="svn.branch.version." />
    <echo message="svn status returned: " />
    <echo message="${svn-status}" />

    <echo message="svn.branch.version set to '${svn.branch.version}'" />
  </target>

  <!-- TODO(jlacey): These are shared, but not really svn-related, and
       should be moved to a separate shared build file. -->
  <macrodef name="repackage-zip"
            description="Repackage release candidate ZIP file for release.">
    <attribute name="destfile" description="Repackaged release ZIP file."/>
    <attribute name="src" description="Original downloads ZIP file."/>
    <attribute name="downloads.prefix" description="Original name prefix."/>
    <attribute name="repackage.prefix" description="Repackaged name prefix."/>
    <sequential>
      <fail>
        <condition>
          <equals arg1="@{src}" arg2="@{destfile}" casesensitive="false" />
        </condition>
        Unable to repackage ZIP files when the source and destination <!--
        -->are the same: @{destfile}
      </fail>
      <zip destfile="@{destfile}">
        <mappedresources>
          <zipfileset src="@{src}" />
          <globmapper from="@{downloads.prefix}*"
                      to="@{repackage.prefix}*" />
        </mappedresources>
      </zip>
      <checksum algorithm="SHA-1" file="@{destfile}" />
    </sequential>
  </macrodef>

  <macrodef name="repackage-downloads"
            description="Repackage release candidate files for release.">
    <attribute name="downloads.dir" description="Directory for all files."/>
    <attribute name="downloads.prefix" description="Original name prefix."/>
    <attribute name="repackage.prefix" description="Repackaged name prefix."/>
    <sequential>
    <echo message="Repackaging ${downloads.prefix} as ${repackage.prefix}." />
    <repackage-zip destfile="@{downloads.dir}/@{repackage.prefix}-src.zip"
                   src="@{downloads.dir}/@{downloads.prefix}-src.zip"
                   downloads.prefix="@{downloads.prefix}"
                   repackage.prefix="@{repackage.prefix}" />
    <repackage-zip destfile="@{downloads.dir}/@{repackage.prefix}.zip"
                   src="@{downloads.dir}/@{downloads.prefix}.zip"
                   downloads.prefix="@{downloads.prefix}"
                   repackage.prefix="@{repackage.prefix}" />
    </sequential>
  </macrodef>

</project>
