<?xml version="1.0" encoding="UTF-8"?>

<project name="security-manager" default="security_manager" basedir=".">

	<!-- ========================= PROPERTIES ============================= -->
	<property name="version" value="1.0" />

	<!-- Define Directories. -->
	<property name="projects.dir" value=".." />
	<property name="install.dir" value="${projects.dir}/install" />

	<property name="COMPILE_DEBUG_FLAG" value="true" />
	<property name="COMPILE_DEBUG_LEVEL" value="source,lines,vars" />

	<property name="build" value="build" />
	<property name="prod" value="${build}/prod" />
	<property name="dist" value="dist" />
	<property name="src" value="source/java" />
	<property name="classes" value="${prod}/classes" />
	<property name="webdocs" value="source/webdocs" />
	<property name="connector-thirdparty.dir" value="${projects.dir}/connector-manager/third-party" />
	<property name="connector-dist.dir" value="${projects.dir}/connector-manager/dist/jarfile" />
	<property name="tests.src" value="source/javatests" />
	<property name="tests.build" value="${build}/tests" />
	<property name="tests.classes" value="${tests.build}/classes" />
	<property name="tests.todir" value="tests_outdir" />
	<property name="tests.data" value="testdata" />
	<property name="jar.dir" value="${dist}/jarfile" />
	<property name="security.jarfile" value="${jar.dir}/security.jar" />
	<property name="builtins.jarfile" value="${jar.dir}/builtins.jar" />
	<property name="tests.jarfile" value="${jar.dir}/security-tests.jar" />
	<property name="thirdparty.prod.jars" value="third-party/prod" />
	<property name="thirdparty.tests.jars" value="third-party/tests" />
	<property name="junit.jarfile" value="${thirdparty.tests.jars}/junit.jar" />

	<property name="regressions.src" value="source/regressions" />
	<property name="regressions.build" value="${build}/regressions" />
	<property name="regressions.classes" value="${regressions.build}/classes" />

	<!-- The directory where all war-files are collected -->
	<property name="war.dir" value="${dist}/${ant.project.name}" />

	<!-- =========================== TASKS =============================== -->
	<target name="security_manager" description="Google Enterprise Security Manager" depends="war,regressions,junit-report" />

	<target name="all" depends="war" />

	<target name="everything" depends="all,run_tests,install-security-manager,junit-report" />

	<target name="init">
		<mkdir dir="${build}" />
		<mkdir dir="${prod}" />
		<mkdir dir="${dist}" />
		<mkdir dir="${classes}" />
		<mkdir dir="${tests.build}" />
		<mkdir dir="${tests.classes}" />
		<mkdir dir="${tests.todir}" />
		<mkdir dir="${tests.data}/tmp" />
		<mkdir dir="${jar.dir}" />
    <mkdir dir="${regressions.build}" />
    <mkdir dir="${regressions.classes}" />
	</target>

	<target name="compile" depends="init">
		<!-- compile java source files -->
		<javac srcdir="${src}" destdir="${classes}" debug="${COMPILE_DEBUG_FLAG}" debuglevel="${COMPILE_DEBUG_LEVEL}">
			<classpath>
				<fileset dir="${thirdparty.prod.jars}" includes="**/*.jar" />
				<fileset dir="${connector-dist.dir}" includes="**/*.jar" />
				<pathelement location="${connector-thirdparty.dir}/prod/servlet-api.jar" />
			</classpath>
		</javac>
	</target>

	<target name="compile_tests" depends="init,compile">
		<!-- compile java source files for tests -->
		<javac srcdir="${tests.src}" destdir="${tests.classes}" debug="${COMPILE_DEBUG_FLAG}" debuglevel="${COMPILE_DEBUG_LEVEL}">
			<classpath>
				<pathelement location="${classes}" />
				<fileset dir="${thirdparty.prod.jars}" includes="**/*.jar" />
				<fileset dir="${thirdparty.tests.jars}" includes="**/*.jar" />
				<fileset dir="${connector-dist.dir}" includes="**/*.jar" />
				<pathelement location="${connector-thirdparty.dir}/prod/servlet-api.jar" />
			</classpath>
		</javac>
	</target>

  <target name="compile_regressions" depends="init,compile">
    <!-- compile java source files for tests -->
    <javac srcdir="${regressions.src}" destdir="${regressions.classes}" debug="${COMPILE_DEBUG_FLAG}" debuglevel="${COMPILE_DEBUG_LEVEL}">
      <classpath>
        <pathelement location="${classes}" />
        <pathelement location="${tests.classes}" />
        <fileset dir="${thirdparty.prod.jars}" includes="**/*.jar" />
        <fileset dir="${thirdparty.tests.jars}" includes="**/*.jar" />
        <fileset dir="${connector-dist.dir}" includes="**/*.jar" />
        <pathelement location="${connector-thirdparty.dir}/prod/servlet-api.jar" />
      </classpath>
    </javac>
  </target>

	<target name="run_tests" depends="compile_tests,jar-builtins">
		<property name="test.suite" value="*" />
		<junit haltonfailure="yes" dir=".">
			<classpath>
				<pathelement location="${classes}" />
				<fileset dir="${thirdparty.prod.jars}" includes="**/*.jar" />
				<fileset dir="${thirdparty.tests.jars}" includes="**/*.jar" />
				<fileset dir="${connector-dist.dir}" includes="**/*.jar" />
				<pathelement location="${jar.dir}/cookieconnector.jar" />
				<pathelement location="${connector-thirdparty.dir}/prod/servlet-api.jar" />
				<pathelement location="${tests.classes}" />
				<pathelement path="${java.class.path}" />
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${tests.todir}">
				<fileset dir="${tests.src}" includes="**/${test.suite}Test.java" />
			</batchtest>
		</junit>
	</target>

	<target name="jar" depends="jar-prod,jar-tests,jar-builtins" description="Create jars for the Security Manager project" />

	<target name="jar-builtins" description="Create jars for built-in connector configuration">
		<tstamp />
		<jar jarfile="${jar.dir}/ssocookieconnector.jar">
			<fileset dir="connectorConfig/SsoCookieIdentityConnector" includes="**/*.xml" />
		</jar>
		<jar jarfile="${jar.dir}/cookieconnector.jar">
			<fileset dir="connectorConfig/regexCookieIdentityConnector" includes="**/*.xml" />
		</jar>
	</target>

	<target name="jar-prod" depends="compile" description="Create production jars for the Security Manager project">
		<tstamp />
		<jar jarfile="${security.jarfile}">
			<fileset dir="${classes}" includes="**/*.class" />
			<manifest>
				<attribute name="Implementation-Title" value="Security Manager Impl" />
				<attribute name="Implementation-Version" value="${version} (build ${svnversion}  ${TODAY})" />
				<attribute name="Implementation-Vendor" value="Google Inc." />
			</manifest>
		</jar>
	</target>

	<target name="jar-tests" depends="compile,compile_tests" description="Create test jars for the Security Manager project">
		<tstamp />
		<jar jarfile="${tests.jarfile}">
			<fileset dir="${tests.classes}" includes="**/*.class" />
			<manifest>
				<attribute name="Implementation-Title" value="Security Manager Tests" />
				<attribute name="Implementation-Version" value="${version} (build ${svnversion}  ${TODAY})" />
				<attribute name="Implementation-Vendor" value="Google Inc." />
			</manifest>
		</jar>
	</target>

	<target name="clean" description="Deletes all build files.">
		<delete dir="${build}" />
		<delete dir="${dist}" />
		<delete dir="${tests.todir}" />
		<delete dir="${tests.todir}" />
		<delete dir="${tests.data}/tmp" />
		<delete dir="${catalina.base}" />
	</target>

	<!-- ======================Installation targets====================== -->

	<!--  Builds a Web Archive - basically a JAR file which
	     also contains all and can be deployed as-is.
	-->

	<target name="install_init">
		<mkdir dir="${war.dir}" />
	</target>

	<target name="war" depends="war-prod,war-tests" description="Builds the Production WAR file." />

	<target name="war-prod" depends="install_init,jar-prod" description="Builds the Production WAR file for installation.">
		<echo> The production war file dir is located at ${war.dir}</echo>

		<tstamp />
		<war warfile="${war.dir}/${ant.project.name}.war" webxml="${webdocs}/prod/web.xml">
			<lib dir="${jar.dir}" includes="*.jar" excludes="security-tests.jar" />
			<lib file="${connector-dist.dir}/connector-spi.jar" />
			<lib file="${connector-dist.dir}/connector.jar" />
			<lib dir="${thirdparty.prod.jars}" includes="*.jar" excludes="servlet-api.jar" />
			<webinf dir="source/webdocs/prod" includes="applicationContext.xml" />
			<manifest>
				<attribute name="Implementation-Title" value="Security Manager" />
				<attribute name="Implementation-Version" value="${version} (build ${svnversion}  ${TODAY})" />
				<attribute name="Implementation-Vendor" value="Google Inc." />
			</manifest>
		</war>
	</target>

	<target name="war-tests" depends="install_init,jar" description="Builds the Test WAR file for installation.">
		<echo> The test war file dir is located at ${war.dir}</echo>

		<tstamp />
		<war warfile="${war.dir}/${ant.project.name}_debug.war" webxml="${webdocs}/test/web.xml">
			<lib dir="${jar.dir}" includes="*.jar" />
			<lib file="${connector-dist.dir}/connector-spi.jar" />
			<lib file="${connector-dist.dir}/connector.jar" />
			<lib dir="${thirdparty.prod.jars}" includes="*.jar" excludes="servlet-api.jar" />
			<!-- above this line is all the stuff that goes in the normal prod jar,
			     below is the stuff that is only needed for testing -->
			<webinf dir="source/webdocs/test" includes="applicationContext.xml" />
			<lib dir="${thirdparty.tests.jars}" includes="*.jar" />
			<manifest>
				<attribute name="Implementation-Title" value="Connector Manager" />
				<attribute name="Implementation-Version" value="${version} (build ${svnversion}  ${TODAY})" />
				<attribute name="Implementation-Vendor" value="Google Inc." />
			</manifest>
		</war>

	</target>

	<target name="make-install-dir">
		<mkdir dir="${install.dir}" />
	</target>

	<target name="install-security-manager" depends="security_manager,make-install-dir">
		<mkdir dir="${install.dir}/security-manager" />
		<copy todir="${install.dir}/security-manager" >
			<fileset dir="dist"/>
		</copy>
	</target>

	 <!-- Regressions Targets -->

	  <property name="catalina-ant.jar" value="third-party/tests/catalina-ant.jar" />

	  <!-- Configure the custom Ant tasks for the Manager application -->
	  <taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask" classpath="${catalina-ant.jar}" />
	  <taskdef name="list" classname="org.apache.catalina.ant.ListTask" classpath="${catalina-ant.jar}" />
	  <taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask" classpath="${catalina-ant.jar}" />
	  <taskdef name="resources" classname="org.apache.catalina.ant.ResourcesTask" classpath="${catalina-ant.jar}" />
	  <taskdef name="roles" classname="org.apache.catalina.ant.RolesTask" classpath="${catalina-ant.jar}" />
	  <taskdef name="start" classname="org.apache.catalina.ant.StartTask" classpath="${catalina-ant.jar}" />
	  <taskdef name="stop" classname="org.apache.catalina.ant.StopTask" classpath="${catalina-ant.jar}" />
	  <taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask" classpath="${catalina-ant.jar}" />

	  <property environment="env" />
	  <property name="catalina.home" value="${env.CATALINA_HOME}" />
	  <property name="catalina.base" value="catalina-base" />

	  <property name="war-prod" value="${basedir}/dist/security-manager/security-manager.war" />

	  <path id="prod.war.path">
	    <pathelement location="${war-prod}" />
	  </path>

	  <target name="make-full-prod-war-path">
	    <pathconvert property="war.prod.full.path" refid="prod.war.path" />
	  </target>

	  <target name="setup-catalina-base">
	    <mkdir dir="${catalina.base}" />
	    <mkdir dir="${catalina.base}/logs" />
	    <mkdir dir="${catalina.base}/work" />
	    <mkdir dir="${catalina.base}/temp" />
	    <mkdir dir="${catalina.base}/conf" />
	    <copy todir="${catalina.base}/conf">
	      <fileset dir="${catalina.home}/conf" />
	    </copy>
	    <copy file="testdata/tomcat-conf/tomcat-users.xml" tofile="${catalina.base}/conf/tomcat-users.xml" overwrite="true" />
	    <copy file="testdata/tomcat-conf/server.xml" tofile="${catalina.base}/conf/server.xml" overwrite="true" />
	    <mkdir dir="${catalina.base}/webapps" />
	    <copy todir="${catalina.base}/webapps">
	      <fileset dir="${catalina.home}/webapps" />
	    </copy>
	  </target>

	  <property name="catalina.logging.manager" value="org.apache.juli.ClassLoaderLogManager" />
	  <property name="catalina.logging.config.file" value="${catalina.base}/conf/logging.properties" />

	  <target name="tomcat-start">
	    <java jar="${catalina.home}/bin/bootstrap.jar" fork="true" spawn="true">
	      <jvmarg value="-Dcatalina.home=${catalina.home}" />
	      <jvmarg value="-Dcatalina.base=${catalina.base}" />
	      <jvmarg value="-Djava.io.tmpdir=${catalina.base}/temp" />
	      <jvmarg value="-Djava.io.tmpdir=${catalina.base}/temp" /> 
	      <jvmarg value="-Djava.util.logging.manager=${catalina.logging.manager}" />
	      <jvmarg value="-Djava.util.logging.config.file=${catalina.logging.config.file}" />  
	      <arg line="start" />
	    </java>
	    <sleep seconds="20" />
	  </target>

	  <target name="tomcat-stop">
	    <java jar="${catalina.home}/bin/bootstrap.jar" fork="true">
	      <jvmarg value="-Dcatalina.home=${catalina.home}" />
	      <jvmarg value="-Dcatalina.base=${catalina.base}" />
	      <jvmarg value="-Djava.io.tmpdir=${catalina.base}/temp" />
	      <jvmarg value="-Djava.util.logging.manager=${catalina.logging.manager}" />
	      <jvmarg value="-Djava.util.logging.config.file=${catalina.logging.config.file}" />  
	      <arg line="stop" />
	    </java>
	  </target>

	  <!-- Configure properties to access the Manager application -->
	  <property name="url" value="http://localhost:8973/manager" />
	  <property name="username" value="admin" />
	  <property name="password" value="tomcat" />
	  <property name="path" value="/security-manager" />

	  <target name="deploy" description="Install security-manager" depends="war,make-full-prod-war-path">
	    <echo message="file:${war.prod.full.path}" />
	    <deploy url="${url}" username="${username}" password="${password}" path="${path}" war="file:${war.prod.full.path}" />
	  </target>

	  <target name="reload" description="Reload security-manager" depends="war">
	    <reload url="${url}" username="${username}" password="${password}" path="${path}" />
	  </target>

	  <target name="undeploy" description="Remove security-manager">
	    <undeploy url="${url}" username="${username}" password="${password}" path="${path}" />
	  </target>

	  <target name="start" description="Start Tomcat application">
	    <start url="${url}" username="${username}" password="${password}" path="${path}" />
	  </target>

	  <target name="stop" description="Stop Tomcat application">
	    <stop url="${url}" username="${username}" password="${password}" path="${path}" />
	  </target>

	  <target name="setup_regressions" depends="compile_regressions,setup-catalina-base,war,make-full-prod-war-path" />

	  <target name="run_regressions">
	    <property name="test.suite" value="*" />
	    <junit haltonfailure="yes" dir=".">
	      <classpath>
	        <pathelement location="${classes}" />
	        <fileset dir="${thirdparty.prod.jars}" includes="**/*.jar" />
	        <fileset dir="${thirdparty.tests.jars}" includes="**/*.jar" />
	        <fileset dir="${connector-dist.dir}" includes="**/*.jar" />
	        <pathelement location="${regressions.classes}" />
	        <pathelement location="${tests.classes}" />
	        <pathelement path="${java.class.path}" />
	      </classpath>
	      <formatter type="xml" />
	      <batchtest fork="yes" todir="${tests.todir}">
	        <fileset dir="${regressions.src}" includes="**/${test.suite}Test.java" />
	      </batchtest>
	    </junit>
	  </target>

	  <target name="regressions" description="Run Tomcat regression tests" depends="setup_regressions">
	    <antcall target="tomcat-start" />
	    <antcall target="deploy" />
	    <antcall target="run_regressions" />
	    <antcall target="undeploy" />
	    <antcall target="tomcat-stop" />
	  </target>

	  <target name="junit-report" >  
	    <junitreport todir="${tests.todir}">
	       <fileset dir="${tests.todir}">
	         <include name="*.xml" />
	       </fileset>
	       <report format="frames" todir="${tests.todir}" />
	     </junitreport>
	    </target>

</project>
